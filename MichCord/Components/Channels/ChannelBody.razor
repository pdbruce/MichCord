@using MichCord.Data
@using MichCord.Components.Messages
@inject AppMeta meta
@inject DummyMessageData dummyMessages

<div class="channel-container">
    <div class="channel-header">
        <h2>@meta.CurrentChannel.Name</h2>
        <p>@meta.CurrentChannel.Description</p>
    </div>

    @if(messages == null)
    {
        <div class="spinner">
            loading . . .
        </div>
    } else
    {
    <div class="message-stream">
        @foreach(var message in messages)
        {
            <MessageBody 
                messageContent="@message.content"
                user="@message.sender"
                timeSent="@message.timeSent.ToString()"
                />
        }
    </div>
    <form>
        <textarea type="text" @bind="message" @bind:event="oninput"></textarea>
        <input type="button" value="Send" @onclick="sendMessage"/>
    </form>
    }

</div>
@code {
    //TODO:
    // sketch some logic for loading messages from db
    private List<Message> messages;
    protected override void OnInitialized()
    {
        // Assign Notify event to StateHasChanged()
        // Now this event will be triggered every time AppMeta's set fxn fires
        meta.Notify += () => { 
            InvokeAsync(StateHasChanged);
            messages = dummyMessages.messages[meta.CurrentChannel.Name];
        };

        messages = dummyMessages.messages[meta.CurrentChannel.Name];
    }

    User testUser = new User("Test", "User", "testuser");
    private string? message { get; set; }
    public void sendMessage()
    {
        messages.Add(new Message(message, testUser));
        message = "";
    }
}
