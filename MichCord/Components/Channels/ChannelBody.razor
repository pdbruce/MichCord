@using MichCord.Data
@using MichCord.Components.Messages
@inject AppMeta meta
@inject DummyMessageData dummyMessages

<div class="channel-container">
    <div class="channel-header">
        <h2>@meta.CurrentChannel.Name</h2>
        <p>@meta.CurrentChannel.Description</p>
    </div>

    @if(messages == null)
    {
        <div class="spinner">
            loading . . .
        </div>
    } else
    {
    <div class="message-stream">
        @foreach(var message in messages)
        {
            <MessageBody 
                messageContent="@message.content"
                user="@message.sender"
                timeSent="@message.timeSent.ToString()"
                />
        }
        <div class="gap">say something nice...</div>
    </div>
    <form @onsubmit="sendMessage">
        <div class="message-box">
            <input class="message-input" type="text" @bind="message" @bind:event="oninput"/>
            <button type="submit">Send</button>
        </div>

    </form>
    }

</div>
@code {
    //TODO:
    // sketch some logic for loading messages from db
    [Inject]
    private MichcordContext _messages { get; set; }

    private List<Message> messages;
    protected override void OnInitialized()
    {
        // Assign Notify event to StateHasChanged()
        // Now this event will be triggered every time AppMeta's set fxn fires
        meta.Notify += () => { 
            InvokeAsync(StateHasChanged);
            messages = dummyMessages.messages[meta.CurrentChannel.Name];
        };

        // Load dummy data from singleton
        messages = dummyMessages.messages[meta.CurrentChannel.Name];

        // Test db
        _messages.Database.EnsureCreated();
    }

    User testUser = new User("Test", "User", "testuser");
    private string? message { get; set; }
    [Inject]
    public IJSRuntime js { get; set; }
    public async void sendMessage()
    {
        messages.Add(new Message(message, testUser));
        message = "";
        await js.InvokeVoidAsync("handleSendMessage");
    }
}
